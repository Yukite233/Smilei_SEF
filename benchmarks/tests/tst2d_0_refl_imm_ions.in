# ---------------------------------------------
# SIMULATION PARAMETERS FOR THE PIC-CODE SMILEI
# ---------------------------------------------

# sim_units: normalisation units for the input data
#            it is used only in the input data & log file
#            codes outputs are always in "normalised" units
#            wavelength = input data are in wavelength-related units
#            normalized = input data are put in code (relativistic) units
#
sim_units = wavelength

# dim: Geometry of the simulation
#      1d3v = cartesian grid with 1d in space + 3d in velocity
#      2d3v = cartesian grid with 2d in space + 3d in velocity
#      3d3v = cartesian grid with 3d in space + 3d in velocity
#      2drz = cylindrical (r,z) grid with 3d3v particles
#
dim = 2d3v

# order of interpolation
#
interpolation_order = 2 

# SIMULATION TIME 
# either use the resolution (res_time) or time-step (timestep)
#
# res_time  : temporal resolution 
# time step : time step
# sim_time  : duration of the simulation 
#
res_time = 250
sim_time = 10.0

# SIMULATION BOX : for all space directions (in 2D & 3D use vector of doubles)
# either use the resolution (res_space) or cell-length (cell_length)
#
# res_space   : spatial resolution 
# sim_length  : length of the simulation 
# cell_length : cell-length 
#
res_space  = 125 125  
sim_length = 6.0 4.0  

# ELECTROMAGNETIC BOUNDARY CONDITIONS
# bc_em_type_long/trans : boundary conditions used for EM fields 
#                         in the longitudinal or transverse directions
#                         periodic      = periodic BC (using MPI topology)
#                         silver-muller = injecting/absorbing
#
bc_em_type_long  = silver-muller
bc_em_type_trans = periodic


# RANDOM seed 
# this is used to randomize the random number generator
#
random_seed = 0

# DEFINE ALL SPECIES
#
# species_type: ion, electron, positron, test ...
# initialization_type: regular, cold or (isotrop) Maxwell−Juettner distribution# n_part_per_cell: number of particle−per−cell
# c_part_max: factor on the memory reserved for the total number of particles
# mass: particle mass in units of the electron mass
# charge: particle charge in units of e (−e is the electron charge)
# density: species density in units of the normalization density
# mean_velocity: mean velocity of the species (3D vector) in units of the light velocity
# temperature: temperature of the species in units of m_e c^2
# dynamics_type: species type of dynamics = norm or rrLL
# time_frozen: time during which the particles are frozen in units of the normalization time
# radiating: boolean, if true incoherent radiation are calculated using the Larmor formula 
#
species
	species_type = ion
	species_geometry = constant
	vacuum_length   = 1.0 0.0 
	dens_length_x   = 1.0 
	dens_length_y   = 4.0
	initialization_type = cold
	ionization_model = none
	n_part_per_cell = 2
	c_part_max = 1.0
	mass = 1836.0
	charge = 1.0
	density = 10.0
	mean_velocity = 0.0
	temperature = 0.0
	dynamics_type = norm
	time_frozen = 10.0
	radiating = false
	bc_part_type_west = refl
	bc_part_type_east = refl
	bc_part_type_south = none
	bc_part_type_north = none
end

species 
	species_type = electron
	species_geometry = constant
	vacuum_length   = 1.0 0.0 
	dens_length_x   = 1.0 
	dens_length_y   = 4.0
	initialization_type = maxwell-juettner
	n_part_per_cell=2
	c_part_max=1.0
	mass = 1.0
	charge = -1.0
	density = 10.0
	mean_velocity = 0.0
	temperature = 0.01
	dynamics_type = norm	
	time_frozen = 0.0
	radiating = false
	bc_part_type_west = refl
	bc_part_type_east = refl
	bc_part_type_south = none
	bc_part_type_north = none
end


# ----------------
# LASER DEFINITION
# ----------------
laser 
	a0=1.0
	angle=0
	delta=0.707106781                
	time_profile = constant
	double_params = 11.0
	transv_profile = plane-wave
	boxSide = west
end

# ---------------------
# DIAGNOSTIC PARAMETERS
# ---------------------

# print_every (on screen text output) 
print_every = 250

# every for field dump
fieldDump_every = 250
avgfieldDump_every = 250
ntime_step_avg     = 250


# DIAG ON SCALARS
# every = number of time-steps between each output
#
diagnostic scalar
        every = 125
end
	
